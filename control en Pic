/* 
 * File:   control.c
 * Author: ire
 *
 * Created on November 4, 2022, 8:38 AM
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include "osc.h"

#define _XTAL_FREQ 8000000

//Variables
uint8_t PB1 = 0;
uint8_t PB2 = 0;

//PROTOTIPO DE FUNCIONES
void setup(void);
//INTERRUPCIONES
void __interrupt() isr(){
    if(RBIF){
        if (PORTBbits.RB0 == 0){
            PB1 = 1;
            PORTD = PB1;
            PORTAbits.RA0 = 1;
        }
        else if (PORTBbits.RB1 == 0){
            PB2 = 2;
            PORTD = PB2;
            PORTAbits.RA1 = 1;
        }
   
        else{
            PB1 = 0;
            PB2 = 0;
            PORTD = 0;
            PORTA = 0;
        }
        RBIF = 0;
    }
    return;
}
//MAIN
void main(void){
    setup();
    while(1){
       
        TXREG = PORTD;
        __delay_ms(10);
    }
}
//FUNCIONES
void setup(void){
    //I/O digitales
    ANSEL = 0;
    ANSELH = 0;
    TRISD = 0;
    TRISA = 0;
    TRISBbits.TRISB0 = 1;
    TRISBbits.TRISB1 = 1;
    
    PORTA = 0;
    PORTB = 0;
    PORTD = 0;

    //Configuraci贸n de pull up en el puerto B
    OPTION_REGbits.nRBPU = 0;
    WPUBbits.WPUB0 = 1;
    WPUBbits.WPUB1 = 1;
    IOCBbits.IOCB0 = 1;
    IOCBbits.IOCB1 = 1;
    RBIE = 1;
    //Iniciaci贸n del oscilador
    initosc(8);
    //Configuraci贸n del generador de baudaje (9600)
    BRG16 = 0;
    BRGH = 1;
    SYNC = 0;
    SPBRG = 51;
    //Configuraci贸n del USART
    SPEN = 1;
    TX9 = 0;
    TXEN = 1;
    //Limpieza de banderas
    RBIF = 1;
    //interrupciones globales y perifericas
    PEIE = 1;
    GIE = 1;
}
